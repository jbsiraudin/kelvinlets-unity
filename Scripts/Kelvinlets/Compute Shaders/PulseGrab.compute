struct kelField 
{
    float3 Ua;
    float3 Ub;
    float r;
};

struct brush
{
    float3 pos;
    float eps;
    float3 force;
    float dt;
};

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Deform

// Mesh buffers
StructuredBuffer<float3> originalVertexBuffer;
RWStructuredBuffer<float3> displacedVertexBuffer;

// Calibration specific params
float MinValue;
float MaxValue;
float MaxTime;

// material specific params
float alpha;
float beta;

// brushes
StructuredBuffer<brush> brushes;

static const float PI = 3.14159265f;

float EvalA(kelField values)
{
    return values.Ua.x + 2.f * values.Ub.x + values.r * values.Ub.y;
}

float EvalB(kelField values)
{
    if (values.r < MinValue)
    {
        return 0.0f;
    }
    return (values.Ua.y - values.Ub.y) / values.r;
}

float EvalDen(float r, float a)
{
    return 16.0f * PI * a * pow(r, 3);
}

float EvalU0(float t, float a, float eps)
{
    float a2t2 = pow(a * t, 2);
    float e2 = pow(eps, 2);
    float num = 5.0f * t * e2 * e2;
    float den = 8.0f * PI * sqrt(pow(a2t2 + e2, 7));
    return num / den;
}

float EvalW(float r, float R, float eps)
{
    // Eq. 8b in [de Goes and James 2018]

    float e2 = pow(eps, 2);
    float R2 = R * R;
    float Re2 = R2 + e2;
    float Re = sqrt(Re2);

    float num = e2 + 2.f * R2 - r * R * (3.f - R2 / Re2);
    return num / Re;
}

float EvalGradW(float r, float R, float eps)
{
    // See Appendix C in [de Goes and James 2018]

    float e2 = pow(eps, 2);
    float R2 = R * R;
    float Re2 = R2 + e2;
    float Re = sqrt(Re2);

    float num = -3.f * e2 * e2 * r;
    float den = Re2 * Re2 * Re;
    return num / den;
}

float EvalU(float r, float t, float a, float eps)
{
    // Eq. 8a in [de Goes and James 2018]
    if (a == MaxValue || t >= MaxTime)
    {
        return 0.f;
    }
    if (r < MinValue)
    {
        return EvalU0(t, a, eps);
    }

    float fP = EvalW(r, r + a * t, eps);
    float fN = EvalW(r, r - a * t, eps);
    float Den = EvalDen(r, a);
    return (fP - fN) / Den;
}

float EvalGradU(float r, float t, float a, float eps)
{
    if (a == MaxValue || t >= MaxTime || r < MinValue)
    {
        return 0.0f;
    }

    float fP = EvalW(r, r + a * t, eps);
    float fN = EvalW(r, r - a * t, eps);
    float gP = EvalGradW(r, r + a * t, eps);
    float gN = EvalGradW(r, r - a * t, eps);
    float Den = EvalDen(r, a);
    return ((gP - gN) - 3.0f * (fP - fN) / r) / Den;
}

void Compute(float r, float t, float eps, out kelField values)
{
    kelField kel;
    kel.Ua = float3(0, 0, 0);
    kel.Ub = float3(0, 0, 0);

    kel.r = r;
    kel.Ua.x = EvalU(r, t, alpha, eps);
    kel.Ua.y = EvalGradU(r, t, alpha, eps);

    kel.Ub.x = EvalU(r, t, beta, eps);
    kel.Ub.y = EvalGradU(r, t, beta, eps);
    values = kel;
}

float3 CalibrateForce(float3 f, float eps)
{
    return f * (10.0f * beta * eps * eps);
}

float3 EvalDisp(float3 v, brush k)
{
    if (k.dt <= 0.0f)
    {
        return float3(0, 0, 0);
    }

    float3 x = v - k.pos;
    float r = length(x);

    kelField values;
    Compute(r, k.dt, k.eps, values);
    float A = EvalA(values);
    float B = EvalB(values);
    return A * k.force + B * dot(k.force, x) * x;
}

[numthreads(128, 1, 1)]
void Deform(uint3 id : SV_DispatchThreadID)
{
    float3 query = originalVertexBuffer[id.x];
    brush kel = brushes[id.y];
    //brush kel = brushes[0];

    float3 v0 = EvalDisp(query, kel);
    float3 v1 = EvalDisp(query + 0.5f * v0, kel);
    float3 v2 = EvalDisp(query + 0.5f * v1, kel);
    float3 v3 = EvalDisp(query + v2, kel);

    displacedVertexBuffer[id.x] += ((v0 + 2.0f * v1 + 2.0f * v2 + v3) / 6.0f);
    // displacedVertexBuffer[id.x] += v0;
    // displacedVertexBuffer[id.x] = query + kel.force * lerp(1.0f, 0.0f, kel.dt / 3.0f);
}